{"version":3,"sources":["../src/utils/transform.ts","../src/utils/wrapper.ts","../src/utils/request.ts","../src/utils/response.ts","../src/hooks/useSAR.ts"],"names":["objectToFormData","obj","prefix","formData","appendToFormData","value","key","item","index","nestedKey","nestedValue","fullKey","formDataToObject","result","setNestedValue","path","keys","current","i","nextKey","isNextKeyNumeric","finalKey","processedValue","sanitizeDataForClient","data","sanitized","withFormTransform","serverAction","parsedData","error","serverActionRequest","action","sanitizeForTransport","createSuccessResponse","message","createErrorResponse","useSAR","condition","cacheTime","revalidateOnMount","revalidateOnFocus","dedupingInterval","executeOnMount","onSuccess","onError","loading","setLoading","useState","setError","setData","isMountedRef","useRef","lastRequestDataRef","abortControllerRef","lastRequestTimeRef","cacheTimeoutRef","useEffect","execute","useCallback","requestData","currentTime","signal","response","errorMessage","err","refetch","reset","mutate","newData","optimisticMutate","updateFn","onFocus"],"mappings":"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","file":"index.js","sourcesContent":["/**\r\n * Data transformation utilities for converting between objects and FormData\r\n */\r\n\r\n/**\r\n * Converts a complex object to FormData, preserving nested structure\r\n * using dot notation (e.g., user.profile.name) and array indices (e.g., items[0].name)\r\n * \r\n * @param obj - The object to convert to FormData\r\n * @param prefix - Optional prefix for all keys\r\n * @returns FormData representation of the object\r\n * \r\n * @example\r\n * ```ts\r\n * const data = {\r\n *   user: { name: 'John', age: 30 },\r\n *   files: [file1, file2],\r\n *   createdAt: new Date()\r\n * };\r\n * \r\n * const formData = objectToFormData(data);\r\n * // Creates keys: \"user.name\", \"user.age\", \"files[0]\", \"files[1]\", \"createdAt\"\r\n * ```\r\n */\r\nexport function objectToFormData(obj: any, prefix = \"\"): FormData {\r\n  const formData = new FormData();\r\n\r\n  function appendToFormData(value: any, key: string): void {\r\n    if (value === null || value === undefined) {\r\n      formData.append(key, \"\");\r\n      return;\r\n    }\r\n\r\n    if (value instanceof File || value instanceof Blob) {\r\n      formData.append(key, value);\r\n      return;\r\n    }\r\n\r\n    if (Array.isArray(value)) {\r\n      value.forEach((item, index) => {\r\n        appendToFormData(item, `${key}[${index}]`);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (typeof value === \"object\" && value.constructor === Object) {\r\n      Object.keys(value).forEach((nestedKey) => {\r\n        const nestedValue = value[nestedKey];\r\n        const fullKey = key ? `${key}.${nestedKey}` : nestedKey;\r\n        appendToFormData(nestedValue, fullKey);\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (value instanceof Date) {\r\n      formData.append(key, value.toISOString());\r\n    } else {\r\n      formData.append(key, String(value));\r\n    }\r\n  }\r\n\r\n  Object.keys(obj).forEach((key) => {\r\n    const fullKey = prefix ? `${prefix}.${key}` : key;\r\n    appendToFormData(obj[key], fullKey);\r\n  });\r\n\r\n  return formData;\r\n}\r\n\r\n/**\r\n * Converts FormData back to an object, reconstructing the original structure\r\n * based on dot notation and array indices\r\n * \r\n * @param formData - The FormData to convert back to an object\r\n * @returns Reconstructed object with proper types\r\n * \r\n * @example\r\n * ```ts\r\n * const formData = new FormData();\r\n * formData.append('user.name', 'John');\r\n * formData.append('user.age', '30');\r\n * \r\n * const obj = formDataToObject(formData);\r\n * // Result: { user: { name: 'John', age: 30 } }\r\n * ```\r\n */\r\nexport function formDataToObject<T = any>(formData: FormData): T {\r\n  const result: any = {};\r\n\r\n  formData.forEach((value, key) => {\r\n    setNestedValue(result, key, value);\r\n  });\r\n\r\n  return result as T;\r\n}\r\n\r\n/**\r\n * Helper function to set nested values using dot notation\r\n * Automatically converts string values to appropriate types (numbers, booleans, dates)\r\n */\r\nfunction setNestedValue(\r\n  obj: any,\r\n  path: string,\r\n  value: FormDataEntryValue\r\n): void {\r\n  const keys = path.split(/[.\\[\\]]/).filter(Boolean);\r\n  let current = obj;\r\n\r\n  for (let i = 0; i < keys.length - 1; i++) {\r\n    const key = keys[i];\r\n    const nextKey = keys[i + 1];\r\n    const isNextKeyNumeric = !isNaN(Number(nextKey));\r\n\r\n    if (!(key in current)) {\r\n      current[key] = isNextKeyNumeric ? [] : {};\r\n    }\r\n\r\n    current = current[key];\r\n  }\r\n\r\n  const finalKey = keys[keys.length - 1];\r\n  let processedValue: any = value;\r\n\r\n  if (typeof value === \"string\") {\r\n    // Convert ISO date strings back to Date objects\r\n    if (value.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}/)) {\r\n      processedValue = new Date(value);\r\n    }\r\n    // Convert numeric strings to numbers\r\n    else if (!isNaN(Number(value)) && value !== \"\") {\r\n      processedValue = Number(value);\r\n    }\r\n    // Convert boolean strings\r\n    else if (value === \"true\" || value === \"false\") {\r\n      processedValue = value === \"true\";\r\n    }\r\n    // Convert empty strings to null\r\n    else if (value === \"\") {\r\n      processedValue = null;\r\n    }\r\n  }\r\n\r\n  current[finalKey] = processedValue;\r\n}\r\n","import type { ServerActionResponse } from \"../types/index\";\r\nimport { formDataToObject } from \"./transform\";\r\n\r\n/**\r\n * Sanitizes data for client transmission by converting non-serializable types to safe formats\r\n * \r\n * @param data - Any data to be sanitized\r\n * @returns Sanitized data safe for JSON serialization\r\n */\r\nfunction sanitizeDataForClient(data: any): any {\r\n  if (data === null || data === undefined) {\r\n    return data;\r\n  }\r\n\r\n  if (Array.isArray(data)) {\r\n    return data.map(sanitizeDataForClient);\r\n  }\r\n\r\n  if (typeof data === 'object') {\r\n    // Convert Date objects to ISO strings\r\n    if (data instanceof Date) {\r\n      return data.toISOString();\r\n    }\r\n\r\n    // Convert File/Blob objects to metadata (not serializable)\r\n    if (data instanceof File || data instanceof Blob) {\r\n      return {\r\n        name: data instanceof File ? data.name : 'blob',\r\n        size: data.size,\r\n        type: data.type,\r\n        _isFile: true\r\n      };\r\n    }\r\n\r\n    // Handle plain objects recursively\r\n    if (data.constructor === Object) {\r\n      const sanitized: any = {};\r\n      for (const [key, value] of Object.entries(data)) {\r\n        sanitized[key] = sanitizeDataForClient(value);\r\n      }\r\n      return sanitized;\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Type helper for sanitized data transformation\r\n */\r\ntype Sanitized<T> = T extends Date \r\n  ? string \r\n  : T extends File \r\n  ? { name: string; size: number; type: string; _isFile: boolean }\r\n  : T extends Blob\r\n  ? { name: string; size: number; type: string; _isFile: boolean }\r\n  : T extends (infer U)[]\r\n  ? Sanitized<U>[]\r\n  : T extends object\r\n  ? { [K in keyof T]: Sanitized<T[K]> }\r\n  : T;\r\n\r\n/**\r\n * Wraps a server action to provide automatic data transformation and response wrapping\r\n * \r\n * Features:\r\n * - Automatically transforms FormData to typed objects\r\n * - Wraps results in ServerActionResponse format\r\n * - Sanitizes data for client consumption\r\n * - Handles errors gracefully\r\n * \r\n * @param serverAction - Server action that returns data directly\r\n * @returns Function that accepts FormData and returns ServerActionResponse with sanitized data\r\n * \r\n * @example\r\n * ```ts\r\n * // Your server action (returns data directly)\r\n * const createUser = withFormTransform(async (data: { name: string }) => {\r\n *   return await db.user.create({ data });\r\n * });\r\n * \r\n * // Usage (automatically handles FormData → object conversion)\r\n * const result = await createUser(formData);\r\n * // Result: { ok: true, message: \"...\", data: sanitizedUser }\r\n * ```\r\n */\r\nexport function withFormTransform<T, R>(\r\n  serverAction: (data: T) => Promise<R> | R\r\n) {\r\n  return async (formData: FormData): Promise<ServerActionResponse<Sanitized<R>>> => {\r\n    try {\r\n      const parsedData = formDataToObject<T>(formData);\r\n      const result = await serverAction(parsedData);\r\n      const sanitizedResult = sanitizeDataForClient(result);\r\n\r\n      return {\r\n        ok: true,\r\n        message: \"Operation completed successfully\",\r\n        data: sanitizedResult as Sanitized<R>\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        ok: false,\r\n        message: error instanceof Error ? error.message : \"Error processing request\",\r\n        error: error instanceof Error ? error : new Error(String(error)),\r\n      };\r\n    }\r\n  };\r\n}\r\n","import type { ServerActionResponse } from \"../types/index\";\r\nimport { objectToFormData } from \"./transform\";\r\n\r\n/**\r\n * Executes a server action with automatic data transformation\r\n * \r\n * Automatically detects whether the input data is FormData or a plain object\r\n * and transforms it accordingly. This provides flexibility in how you send data\r\n * to server actions - use FormData for forms or plain objects for programmatic calls.\r\n * \r\n * @param action - Server action wrapped with withFormTransform\r\n * @param data - FormData from a form or plain JavaScript object\r\n * @returns Promise resolving to ServerActionResponse\r\n * \r\n * @example\r\n * ```ts\r\n * // With FormData (from HTML form)\r\n * const formData = new FormData(form);\r\n * const result = await serverActionRequest(createUser, formData);\r\n * \r\n * // With plain object (programmatic)\r\n * const userData = { name: 'John', email: 'john@example.com' };\r\n * const result = await serverActionRequest(createUser, userData);\r\n * ```\r\n */\r\nexport const serverActionRequest = async <T>(\r\n  action: (formData: FormData) => Promise<ServerActionResponse<T>>, \r\n  data: FormData | Record<string, any>\r\n): Promise<ServerActionResponse<T>> => {\r\n  try {\r\n    let formData: FormData;\r\n\r\n    if (data instanceof FormData) {\r\n      formData = data;\r\n    } else {\r\n      formData = objectToFormData(data);\r\n    }\r\n\r\n    const response = await action(formData);\r\n    return response;\r\n  } catch (error) {\r\n    return {\r\n      ok: false,\r\n      message: \"Error processing request\",\r\n      error: error instanceof Error ? error : new Error(String(error)),\r\n    };\r\n  }\r\n};\r\n","import { ServerActionResponse } from \"../types\";\r\n\r\n/**\r\n * Sanitizes data to ensure client-server compatibility by converting\r\n * non-serializable types to safe formats\r\n * \r\n * @param data - Any data to sanitize\r\n * @returns Sanitized data safe for JSON serialization\r\n */\r\nexport function sanitizeForTransport(data: any): any {\r\n  if (data === null || data === undefined) {\r\n    return data;\r\n  }\r\n\r\n  if (Array.isArray(data)) {\r\n    return data.map(sanitizeForTransport);\r\n  }\r\n\r\n  if (typeof data === 'object') {\r\n    if (data instanceof Date) {\r\n      return data.toISOString();\r\n    }\r\n\r\n    if (data instanceof File || data instanceof Blob) {\r\n      return {\r\n        name: data instanceof File ? data.name : 'blob',\r\n        size: data.size,\r\n        type: data.type,\r\n        _isFile: true\r\n      };\r\n    }\r\n\r\n    if (data.constructor === Object) {\r\n      const sanitized: any = {};\r\n      for (const [key, value] of Object.entries(data)) {\r\n        sanitized[key] = sanitizeForTransport(value);\r\n      }\r\n      return sanitized;\r\n    }\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\n/**\r\n * Creates a success response with sanitized data\r\n * \r\n * @param data - The response data\r\n * @param message - Optional success message\r\n * @returns ServerActionResponse with success status\r\n * \r\n * @example\r\n * ```ts\r\n * return createSuccessResponse(user, \"User created successfully\");\r\n * ```\r\n */\r\nexport function createSuccessResponse<T>(\r\n  data: T, \r\n  message: string = \"Operation successful\"\r\n): ServerActionResponse<T> {\r\n  return {\r\n    ok: true,\r\n    message,\r\n    data: sanitizeForTransport(data) as T\r\n  };\r\n}\r\n\r\n/**\r\n * Creates an error response\r\n * \r\n * @param error - Error object or error message\r\n * @param message - Optional error message\r\n * @returns ServerActionResponse with error status\r\n * \r\n * @example\r\n * ```ts\r\n * return createErrorResponse(error, \"Failed to create user\");\r\n * ```\r\n */\r\nexport function createErrorResponse(\r\n  error: Error | string,\r\n  message: string = \"Operation failed\"\r\n): ServerActionResponse<never> {\r\n  return {\r\n    ok: false,\r\n    message,\r\n    error: error instanceof Error ? error : new Error(String(error))\r\n  };\r\n}\r\n\r\n/**\r\n * Processes a server action response, automatically sanitizing data\r\n * \r\n * If you pass a plain object, it wraps it in ServerActionResponse.\r\n * If you pass an existing ServerActionResponse, it sanitizes the data.\r\n * \r\n * @param response - Plain object or existing ServerActionResponse\r\n * @param message - Optional message for plain objects\r\n * @returns ServerActionResponse with sanitized data\r\n * \r\n * @example\r\n * ```ts\r\n * // With plain object\r\n * return serverActionResponse(user, \"User retrieved\");\r\n * \r\n * // With existing response\r\n * return serverActionResponse(existingResponse);\r\n * ```\r\n */\r\nexport function serverActionResponse<T>(\r\n  response: T | ServerActionResponse<T>,\r\n  message?: string\r\n): ServerActionResponse<T> {\r\n  if (response && typeof response === 'object' && 'ok' in response) {\r\n    const serverResponse = response as ServerActionResponse<T>;\r\n    \r\n    if (serverResponse.ok) {\r\n      return {\r\n        ...serverResponse,\r\n        data: sanitizeForTransport(serverResponse.data) as T\r\n      };\r\n    }\r\n    \r\n    return serverResponse;\r\n  }\r\n\r\n  return createSuccessResponse(response as T, message);\r\n}\r\n\r\n/**\r\n * Type helper that transforms types to their sanitized equivalents\r\n * \r\n * - Date → string (ISO format)\r\n * - File/Blob → metadata object\r\n * - Arrays and nested objects are processed recursively\r\n * \r\n * @template T The original type to be sanitized\r\n */\r\nexport type Sanitized<T> = T extends Date \r\n  ? string \r\n  : T extends File \r\n  ? { name: string; size: number; type: string; _isFile: boolean }\r\n  : T extends Blob\r\n  ? { name: string; size: number; type: string; _isFile: boolean }\r\n  : T extends (infer U)[]\r\n  ? Sanitized<U>[]\r\n  : T extends object\r\n  ? { [K in keyof T]: Sanitized<T[K]> }\r\n  : T;\r\n","\"use client\";\r\n\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport type {\r\n  OptimisticUpdate,\r\n  SAROptions,\r\n  SARReturn,\r\n  ServerActionResponse,\r\n} from \"../types\";\r\nimport { serverActionRequest } from \"../utils/request\";\r\n\r\n/**\r\n * Advanced React hook for Server Actions with SWR-like functionality\r\n * \r\n * Provides caching, deduplication, optimistic updates, and automatic revalidation\r\n * for React Server Actions. Similar to SWR but specifically designed for server actions.\r\n * \r\n * @template T - The type of data returned by the server action\r\n * \r\n * @param options - Configuration object for the hook behavior\r\n * @returns Object with state and functions to manage the server action\r\n * \r\n * @example\r\n * ```tsx\r\n * function UserProfile({ userId }: { userId: string }) {\r\n *   const { data: user, execute, loading, error } = useSAR({\r\n *     action: getUserAction,\r\n *     condition: !!userId,\r\n *     cacheTime: 5000,\r\n *     revalidateOnFocus: true,\r\n *     onSuccess: (user) => toast.success(`Welcome ${user.name}!`)\r\n *   });\r\n * \r\n *   useEffect(() => {\r\n *     execute({ userId });\r\n *   }, [userId]);\r\n * \r\n *   if (loading) return <Spinner />;\r\n *   if (error) return <Error error={error} />;\r\n *   if (!user) return <NotFound />;\r\n * \r\n *   return <div>Hello {user.name}!</div>;\r\n * }\r\n * ```\r\n */\r\nexport function useSAR<T>({\r\n  action: serverAction,\r\n  condition,\r\n  cacheTime = 0,\r\n  revalidateOnMount = true,\r\n  revalidateOnFocus = false,\r\n  dedupingInterval = 2000,\r\n  executeOnMount = true,\r\n  onSuccess,\r\n  onError,\r\n}: SAROptions<T>): SARReturn<T> {\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string>();\r\n  const [data, setData] = useState<T>();\r\n\r\n  const isMountedRef = useRef(false);\r\n  const lastRequestDataRef = useRef<FormData | Record<string, any> | undefined>(\r\n    undefined\r\n  );\r\n\r\n  // References for AbortController and request tracking\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n  const lastRequestTimeRef = useRef<number>(0);\r\n\r\n  // Cache management\r\n  const cacheTimeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  // Cleanup resources on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n      if (cacheTimeoutRef.current) {\r\n        clearTimeout(cacheTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  /**\r\n   * Executes the server action with the provided data\r\n   * \r\n   * Includes deduplication, caching, and error handling\r\n   */\r\n  const execute = useCallback(\r\n    async (\r\n      requestData?: FormData | Record<string, any>\r\n    ): Promise<ServerActionResponse<T> | void> => {\r\n      // Check execution condition\r\n      if (typeof condition !== \"undefined\" && !condition) {\r\n        return;\r\n      }\r\n\r\n      // Store data for refetch functionality\r\n      if (requestData) {\r\n        lastRequestDataRef.current = requestData;\r\n      }\r\n\r\n      // Deduplication: prevent rapid successive requests\r\n      const currentTime = Date.now();\r\n      if (\r\n        currentTime - lastRequestTimeRef.current < dedupingInterval &&\r\n        loading\r\n      ) {\r\n        return;\r\n      }\r\n      lastRequestTimeRef.current = currentTime;\r\n\r\n      // Cancel previous request if exists\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      // Create new AbortController for cancellation\r\n      abortControllerRef.current = new AbortController();\r\n      const signal = abortControllerRef.current.signal;\r\n\r\n      setLoading(true);\r\n      setError(undefined);\r\n\r\n      try {\r\n        const response = await serverActionRequest<T>(\r\n          serverAction,\r\n          requestData || lastRequestDataRef.current || {}\r\n        );\r\n\r\n        if (signal.aborted) return;\r\n\r\n        if (response.ok) {\r\n          setData(response.data);\r\n\r\n          // Success callback\r\n          if (onSuccess) {\r\n            onSuccess(response.data);\r\n          }\r\n\r\n          // Set cache timeout if configured\r\n          if (cacheTime > 0) {\r\n            if (cacheTimeoutRef.current) {\r\n              clearTimeout(cacheTimeoutRef.current);\r\n            }\r\n            cacheTimeoutRef.current = setTimeout(() => {\r\n              setData(undefined);\r\n            }, cacheTime);\r\n          }\r\n        } else {\r\n          const errorMessage = response.message || \"Operation failed\";\r\n          setError(errorMessage);\r\n\r\n          // Error callback\r\n          if (onError) {\r\n            onError(errorMessage);\r\n          }\r\n        }\r\n\r\n        return response;\r\n      } catch (err: any) {\r\n        if (!signal.aborted) {\r\n          const errorMessage = err.message || \"An unexpected error occurred\";\r\n          setError(errorMessage);\r\n\r\n          // Error callback\r\n          if (onError) {\r\n            onError(errorMessage);\r\n          }\r\n        }\r\n      } finally {\r\n        if (!signal.aborted) {\r\n          setLoading(false);\r\n        }\r\n      }\r\n    },\r\n    [\r\n      condition,\r\n      serverAction,\r\n      loading,\r\n      cacheTime,\r\n      dedupingInterval,\r\n      onSuccess,\r\n      onError,\r\n    ]\r\n  );\r\n\r\n  /**\r\n   * Refetches data using the last request parameters\r\n   */\r\n  const refetch =\r\n    useCallback(async (): Promise<ServerActionResponse<T> | void> => {\r\n      return await execute(lastRequestDataRef.current);\r\n    }, [execute]);\r\n\r\n  /**\r\n   * Resets all state and clears cache\r\n   */\r\n  const reset = useCallback(() => {\r\n    setData(undefined);\r\n    setError(undefined);\r\n    lastRequestDataRef.current = undefined;\r\n\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n\r\n    if (cacheTimeoutRef.current) {\r\n      clearTimeout(cacheTimeoutRef.current);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Directly mutates the local data without executing the server action\r\n   */\r\n  const mutate = useCallback((newData: T | undefined) => {\r\n    setData(newData);\r\n\r\n    // Reset cache if active\r\n    if (cacheTimeoutRef.current) {\r\n      clearTimeout(cacheTimeoutRef.current);\r\n      cacheTimeoutRef.current = null;\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Helper for optimistic updates using an updater function\r\n   */\r\n  const optimisticMutate = useCallback((updateFn: OptimisticUpdate<T>) => {\r\n    setData((current) => updateFn(current));\r\n  }, []);\r\n\r\n  // Revalidation on window focus\r\n  useEffect(() => {\r\n    if (!revalidateOnFocus) return;\r\n\r\n    const onFocus = () => {\r\n      if (document.visibilityState === \"visible\") {\r\n        refetch();\r\n      }\r\n    };\r\n\r\n    document.addEventListener(\"visibilitychange\", onFocus);\r\n    window.addEventListener(\"focus\", onFocus);\r\n\r\n    return () => {\r\n      document.removeEventListener(\"visibilitychange\", onFocus);\r\n      window.removeEventListener(\"focus\", onFocus);\r\n    };\r\n  }, [revalidateOnFocus, refetch]);\r\n\r\n  // Initial execution on mount\r\n  useEffect(() => {\r\n    if (isMountedRef.current) return;\r\n    isMountedRef.current = true;\r\n\r\n    if (!executeOnMount) return;\r\n\r\n    if ((revalidateOnMount && typeof condition === \"undefined\") || condition) {\r\n      execute();\r\n    }\r\n  }, [executeOnMount, revalidateOnMount, condition, execute]);\r\n\r\n  return {\r\n    data,\r\n    error,\r\n    loading,\r\n    execute,\r\n    refetch,\r\n    mutate,\r\n    optimisticMutate,\r\n    reset,\r\n  };\r\n}\r\n"]}